// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  mines         Mine[]    // Users can have favorite mines
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Mine Models
model Mine {
  id          String   @id @default(cuid())
  name        String
  type        String   // Gold, Copper, Iron, etc.
  latitude    Float
  longitude   Float
  country     String
  region      String?
  production  String?  // e.g., "1.2M oz/year"
  status      String   // Active, Inactive, Planned
  description String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  userId      String?  // If user added this mine
  user        User?    @relation(fields: [userId], references: [id])
  
  // Additional mine details
  mineDetails MineDetail[]
  
  @@index([type])
  @@index([country])
  @@index([status])
}

model MineDetail {
  id          String   @id @default(cuid())
  mineId      String
  mine        Mine     @relation(fields: [mineId], references: [id], onDelete: Cascade)
  
  // Detailed information
  mineralType String   // Specific mineral type
  grade       String?  // Ore grade
  reserves    String?  // Estimated reserves
  production  String?  // Annual production
  year        Int?     // Year of data
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([mineId])
  @@index([mineralType])
}
